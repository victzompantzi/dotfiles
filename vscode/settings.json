{
  "[c]": {
    "editor.defaultFormatter": "llvm-vs-code-extensions.vscode-clangd"
  },
  "[csharp]": {
    "editor.defaultFormatter": "csharpier.csharpier-vscode"
  },
  "[html]": {
    "editor.defaultFormatter": "vscode.html-language-features"
  },
  "[ignore]": {
    "editor.defaultFormatter": "foxundermoon.shell-format"
  },
  "[javascript]": {
    "editor.maxTokenizationLineLength": 2500
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[python]": {
    "editor.defaultFormatter": "ms-python.black-formatter"
  },
  "[shellscript]": {
    "editor.defaultFormatter": "foxundermoon.shell-format"
  },
  "accessibility.signals.terminalBell": {
    "sound": "on"
  },
  "activePositions.autorefresh": true,
  "allowSyntheticDefaultImports": "",
  "auto-rename-tag.activationOnLanguage": ["html", "xml", "php", "javascript"],
  // Better Comments
  "better-comments.multilineComments": true,
  "better-comments.tags": [
    {
      "backgroundColor": "transparent",
      "bold": false,
      "color": "#FF2D00",
      "italic": false,
      "strikethrough": false,
      "tag": "!",
      "underline": false
    },
    {
      "backgroundColor": "transparent",
      "color": "#3498DB",
      "italic": false,
      "strikethrough": false,
      "tag": "?",
      "underline": false
    },
    {
      "backgroundColor": "transparent",
      "bold": false,
      "color": "#474747",
      "italic": false,
      "strikethrough": true,
      "tag": "//",
      "underline": false
    },
    {
      "backgroundColor": "transparent",
      "bold": false,
      "color": "#FF8C00",
      "italic": false,
      "strikethrough": false,
      "tag": "todo",
      "underline": false
    },
    {
      "backgroundColor": "transparent",
      "bold": false,
      "color": "#98C379",
      "italic": false,
      "strikethrough": false,
      "tag": "*",
      "underline": false
    }
  ],
  "C_Cpp.default.intelliSenseMode": "clang-x64",
  "C_Cpp.intelliSenseEngine": "disabled",
  "C_Cpp.loggingLevel": "Warning",
  "clangd.checkUpdates": true,
  "cloudcode.autoDependencies": "off",
  "cmake.configureOnOpen": true,
  "cmake.options.statusBarVisibility": "compact",
  "cmake.showOptionsMovedNotification": false,
  "commentTranslate.targetLanguage": "es",
  "cSpell.enableFiletypes": ["!c"],
  "cSpell.language": "en,es",
  "cSpell.userWords": [
    "CDMX",
    "Contáctanos",
    "Cuauhtémoc",
    "dotnet",
    "mayoreo",
    "Obregón",
    "Poniatowska",
    "Suscríbete"
  ],
  "debug.onTaskErrors": "debugAnyway",
  "debug.openDebug": "neverOpen",
  "debug.showBreakpointsInOverviewRuler": true,
  "deepl.formality": "default",
  "deepl.splitSentences": "1",
  "deepl.tagHandling": "off",
  "deepl.translationMode": "Replace",
  "diffEditor.ignoreTrimWhitespace": false,
  "diffEditor.renderIndicators": true,
  "dotnet.preferRuntimeFromSDK": true,
  // Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.
  "editor.acceptSuggestionOnCommitCharacter": true,
  // Controls if suggestions should be accepted on 'Enter' - in addition to 'Tab'. Helps to avoid ambiguity between inserting new lines or accepting suggestions. The value 'smart' means only accept a suggestion with Enter when it makes a textual change
  "editor.acceptSuggestionOnEnter": "on",
  "editor.autoClosingBrackets": "always",
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "always"
  },
  "editor.cursorBlinking": "phase",
  "editor.cursorSmoothCaretAnimation": "on",
  "editor.cursorWidth": 4,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.detectIndentation": true,
  "editor.fontFamily": "Cascadia Code NF",
  "editor.fontLigatures": true,
  "editor.fontSize": 18,
  "editor.fontWeight": "400",
  "editor.formatOnPaste": true,
  "editor.formatOnSave": true,
  "editor.formatOnType": true,
  "editor.glyphMargin": true,
  "editor.guides.bracketPairs": true,
  "editor.guides.indentation": false,
  "editor.letterSpacing": 0.5,
  "editor.lineHeight": 0,
  "editor.lineNumbers": "relative",
  "editor.linkedEditing": true,
  "editor.matchBrackets": "always",
  "editor.minimap.autohide": true,
  "editor.minimap.maxColumn": 120,
  "editor.minimap.showSlider": "always",
  "editor.mouseWheelZoom": true,
  "editor.overviewRulerBorder": false,
  // Enable parameter hints
  "editor.parameterHints.enabled": true,
  // Controls if quick suggestions should show up while typing
  "editor.quickSuggestions": {
    "comments": false,
    "other": true,
    "strings": false
  },
  // Controls the delay in ms after which quick suggestions will show up.
  "editor.quickSuggestionsDelay": 10,
  "editor.renderWhitespace": "all",
  "editor.scrollbar.vertical": "visible",
  "editor.scrollbar.verticalScrollbarSize": 10,
  "editor.semanticHighlighting.enabled": "configuredByTheme",
  "editor.snippetSuggestions": "top",
  "editor.stickyScroll.enabled": true,
  // Controls whether sorting favours words that appear close to the cursor
  "editor.suggest.localityBonus": true,
  "editor.suggest.showStatusBar": true,
  // Controls if suggestions should automatically show up when typing trigger characters
  "editor.suggestOnTriggerCharacters": true,
  // Controls how suggestions are pre-selected when showing the suggest list
  "editor.suggestSelection": "first",
  // Controls if pressing tab inserts the best suggestion and if tab cycles through other suggestions
  "editor.tabCompletion": "on",
  "editor.tabSize": 2,
  // Enable word based suggestions
  "editor.wordBasedSuggestions": "matchingDocuments",
  "editor.wordSeparators": "`~!@#%^&*()-=+[{]}\\|;:'\",.<>/?",
  "editor.wordWrap": "on",
  "eslint.enable": true,
  "eslint.run": "onType",
  "explorer.confirmDragAndDrop": false,
  "extensions.experimental.affinity": {
    "asvetliakov.vscode-neovim": 1,
    "vscodevim.vim": 1
  },
  // To improve performance
  "files.associations": {
    "*.c": "c",
    "*.js": "javascript",
    ".batrc": "plaintext"
  },
  "files.autoGuessEncoding": true,
  "files.autoSave": "afterDelay",
  "files.autoSaveDelay": 4000,
  "files.defaultLanguage": "${activeEditorLanguage}",
  "files.encoding": "utf8",
  "files.eol": "\r\n",
  "files.trimFinalNewlines": true,
  "files.trimTrailingWhitespace": true,
  "git.openRepositoryInParentFolders": "never",
  "github.copilot.enable": {
    "*": false,
    "markdown": false,
    "plaintext": false,
    "scminput": false
  },
  // SOP's highlight matching tag setting.
  "highlight-matching-tag.styles": {
    "opening": {
      "full": {
        "highlight": "rgba(165, 153, 233, 0.3)"
      }
    }
  },
  "indenticator.color.dark": "rgba(255,255,255,0.1)",
  "indenticator.width": 0.1,
  // For which languages indent-rainbow should be deactivated (if empty it means none).
  "indentRainbow.excludedLanguages": ["plaintext"],
  // The delay in ms until the editor gets updated.
  "indentRainbow.updateDelay": 100, // 10 makes it super fast but may cost more resources
  "js/ts.implicitProjectConfig.checkJs": true,
  "launch": {
    "configurations": []
  },
  "liveServer.settings.donotShowInfoMsg": true,
  "obsidian-md-vsc.defaultNote": "Computer Science\\!!!",
  "obsidian-md-vsc.defaultVault": "Obsidian Vault",
  "obsidian-md-vsc.defaultVaultPath": "C:\\Users\\vhtc8\\OneDrive\\OneSyncFiles\\Obsidian Vault",
  "peacock.favoriteColors": [
    {
      "name": "Angular Red",
      "value": "#dd0531"
    },
    {
      "name": "Azure Blue",
      "value": "#007fff"
    },
    {
      "name": "JavaScript Yellow",
      "value": "#f9e64f"
    },
    {
      "name": "Mandalorian Blue",
      "value": "#1857a4"
    },
    {
      "name": "Node Green",
      "value": "#215732"
    },
    {
      "name": "React Blue",
      "value": "#61dafb"
    },
    {
      "name": "Something Different",
      "value": "#832561"
    },
    {
      "name": "Svelte Orange",
      "value": "#ff3d00"
    },
    {
      "name": "Vue Green",
      "value": "#42b883"
    }
  ],
  "powershell.buttons.showPanelMovementButtons": true,
  "powershell.codeFolding.showLastLine": false,
  "powershell.integratedConsole.focusConsoleOnExecute": false,
  "powershell.pester.codeLens": false,
  "prettier.endOfLine": "auto",
  "prettier.eslintIntegration": true,
  "projectManager.hg.baseFolders": ["C:\\Users\\vhtc8\\projects"],
  "projectManager.sortList": "Recent",
  "python.defaultInterpreterPath": "C:\\Users\\vhtc8\\.pyenv\\pyenv-win\\versions\\3.11.9\\python.exe",
  "redhat.telemetry.enabled": false,
  "remote.autoForwardPortsSource": "output",
  "saveFile": [
    "src.remember",
    "workbench.action.files.save",
    {
      "args": {
        "delay": 1000 // change according to your need
      },
      "command": "$delay"
    },
    "src.restore"
  ],
  "security.allowedUNCHosts": ["wsl.localhost"],
  "security.workspace.trust.untrustedFiles": "open",
  "subtleBrackets.pairs": [
    {
      "close": ")",
      "open": "("
    },
    {
      "close": "]",
      "open": "["
    },
    {
      "bold": false,
      "close": "}",
      "open": "{"
    }
  ],
  "subtleBrackets.style": {
    "borderStyle": "none none solid none",
    "borderWidth": "1px"
  },
  "tabnine.experimentalAutoImports": true,
  "terminal.external.windowsExec": "C:\\Program Files\\PowerShell\\7\\pwsh.exe",
  "terminal.integrated.allowChords": false,
  "terminal.integrated.cursorBlinking": true,
  //"terminal.integrated.automationProfile.windows": {
  //  "path": "C:\\Program Files\\PowerShell7\\pwsh.exe"
  //},
  "terminal.integrated.defaultProfile.windows": "PowerShell",
  "terminal.integrated.enableImages": true,
  "terminal.integrated.enablePersistentSessions": false,
  "terminal.integrated.enableVisualBell": true,
  "terminal.integrated.fontFamily": "MesloLGM Nerd Font Mono",
  "terminal.integrated.gpuAcceleration": "on",
  "terminal.integrated.middleClickBehavior": "paste",
  "terminal.integrated.persistentSessionReviveProcess": "never",
  "typescript.tsserver.log": "off",
  "update.mode": "start",
  "vim.easymotion": true,
  "vim.handleKeys": {
    "<C-a>": false,
    "<C-f>": false
  },
  "vim.hlsearch": true,
  "vim.incsearch": true,
  "vim.insertModeKeyBindings": [
    {
      "after": ["<Esc>"],
      "before": ["j", "j"]
    }
  ],
  "vim.leader": "<space>",
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      "before": ["<space>"],
      "commands": ["whichkey.show"]
    },
    {
      "after": ["d", "d"],
      "before": ["<leader>", "d"]
    },
    {
      "before": ["<C-n>"],
      "commands": [":nohl"]
    },
    {
      "before": ["K"],
      "commands": ["lineBreakInsert"],
      "silent": true
    }
  ],
  "vim.smartRelativeLine": true,
  "vim.useCtrlKeys": true,
  "vim.useSystemClipboard": true,
  "vim.visualModeKeyBindingsNonRecursive": [
    {
      "before": ["<space>"],
      "commands": ["vspacecode.space"]
    },
    {
      "before": ["<space>"],
      "commands": ["whichkey.show"]
    },
    {
      "before": [","],
      "commands": [
        "vspacecode.space",
        {
          "args": "m",
          "command": "whichkey.triggerKey"
        }
      ]
    },
    {
      "before": [">"],
      "commands": ["editor.action.indentLines"]
    },
    {
      "before": ["<"],
      "commands": ["editor.action.outdentLines"]
    }
  ],
  "vscode-neovim.compositeKeys": {
    "jk": {
      "args": [
        [
          "local code = require('vscode')",
          "code.action('vscode-neovim.escape')",
          "code.action('workbench.action.files.save')"
        ]
      ],
      // Use lua to execute any logic
      "command": "vscode-neovim.lua"
    }
  },
  "vscode-neovim.neovimClean": false,
  "vscode-neovim.neovimExecutablePaths.win32": "C:\\Users\\vhtc8\\scoop\\shims\\nvim.exe",
  "whichkey.bindings": [
    {
      "command": "workbench.action.showCommands",
      "key": " ",
      "name": "Commands",
      "type": "command"
    },
    {
      "commands": [
        "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup",
        "list.select"
      ],
      "key": "\t",
      "name": "Last editor",
      "type": "commands"
    },
    {
      "command": "whichkey.searchBindings",
      "key": "?",
      "name": "Search keybindings",
      "type": "command"
    },
    {
      "command": "whichkey.repeatMostRecent",
      "key": ".",
      "name": "Repeat most recent action",
      "type": "command"
    },
    {
      "bindings": [
        {
          "command": "workbench.action.showAllEditors",
          "key": "b",
          "name": "Show all buffers/editors",
          "type": "command"
        },
        {
          "command": "workbench.action.showEditorsInActiveGroup",
          "key": "B",
          "name": "Show all buffers/editors in active group",
          "type": "command"
        },
        {
          "command": "workbench.action.closeActiveEditor",
          "key": "d",
          "name": "Close active editor",
          "type": "command"
        },
        {
          "command": "workbench.action.moveEditorToLeftGroup",
          "key": "H",
          "name": "Move editor into left group",
          "type": "command"
        },
        {
          "command": "workbench.action.moveEditorToBelowGroup",
          "key": "J",
          "name": "Move editor into below group",
          "type": "command"
        },
        {
          "command": "workbench.action.moveEditorToAboveGroup",
          "key": "K",
          "name": "Move editor into above group",
          "type": "command"
        },
        {
          "command": "workbench.action.moveEditorToRightGroup",
          "key": "L",
          "name": "Move editor into right group",
          "type": "command"
        },
        {
          "command": "workbench.action.closeOtherEditors",
          "key": "M",
          "name": "Close other editors",
          "type": "command"
        },
        {
          "command": "workbench.action.nextEditor",
          "key": "n",
          "name": "Next editor",
          "type": "command"
        },
        {
          "command": "workbench.action.previousEditor",
          "key": "p",
          "name": "Previous editor",
          "type": "command"
        },
        {
          "command": "workbench.action.files.newUntitledFile",
          "key": "N",
          "name": "New untitled editor",
          "type": "command"
        },
        {
          "command": "workbench.action.reopenClosedEditor",
          "key": "u",
          "name": "Reopen closed editor",
          "type": "command"
        },
        {
          "commands": [
            "editor.action.selectAll",
            "editor.action.clipboardPasteAction"
          ],
          "key": "P",
          "name": "Paste clipboard to buffer",
          "type": "commands"
        },
        {
          "commands": [
            "editor.action.selectAll",
            "editor.action.clipboardCopyAction",
            "cancelSelection"
          ],
          "key": "Y",
          "name": "Copy buffer to clipboard",
          "type": "commands"
        }
      ],
      "key": "b",
      "name": "+Buffers/Editors",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "workbench.action.debug.start",
          "key": "d",
          "name": "Start debug",
          "type": "command"
        },
        {
          "command": "workbench.action.debug.run",
          "key": "D",
          "name": "Run without debugging",
          "type": "command"
        },
        {
          "command": "workbench.action.debug.stop",
          "key": "S",
          "name": "Stop debug",
          "type": "command"
        },
        {
          "command": "workbench.action.debug.continue",
          "key": "c",
          "name": "Continue debug",
          "type": "command"
        },
        {
          "command": "workbench.action.debug.pause",
          "key": "p",
          "name": "Pause debug",
          "type": "command"
        },
        {
          "command": "workbench.action.debug.restart",
          "key": "R",
          "name": "Restart debug",
          "type": "command"
        },
        {
          "command": "workbench.action.debug.stepInto",
          "key": "i",
          "name": "Step into",
          "type": "command"
        },
        {
          "command": "workbench.action.debug.stepOver",
          "key": "s",
          "name": "Step over",
          "type": "command"
        },
        {
          "command": "workbench.action.debug.stepOut",
          "key": "o",
          "name": "Step out",
          "type": "command"
        },
        {
          "command": "editor.debug.action.toggleBreakpoint",
          "key": "b",
          "name": "Toggle breakpoint",
          "type": "command"
        },
        {
          "command": "editor.debug.action.toggleInlineBreakpoint",
          "key": "B",
          "name": "Toggle inline breakpoint",
          "type": "command"
        },
        {
          "command": "debug.jumpToCursor",
          "key": "j",
          "name": "Jump to cursor",
          "type": "command"
        },
        {
          "command": "workbench.debug.action.toggleRepl",
          "key": "v",
          "name": "REPL",
          "type": "command"
        },
        {
          "command": "workbench.debug.action.focusWatchView",
          "key": "w",
          "name": "Focus on watch window",
          "type": "command"
        },
        {
          "command": "editor.debug.action.selectionToWatch",
          "key": "W",
          "name": "Add to watch",
          "type": "command"
        }
      ],
      "key": "d",
      "name": "+Debug",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "args": "whichkey.transient.error",
          "command": "whichkey.showTransient",
          "key": ".",
          "name": "Error transient",
          "type": "command"
        },
        {
          "command": "workbench.actions.view.problems",
          "key": "l",
          "name": "List errors",
          "type": "command"
        },
        {
          "command": "editor.action.marker.prev",
          "key": "N",
          "name": "Previous error",
          "type": "command"
        },
        {
          "command": "editor.action.marker.next",
          "key": "n",
          "name": "Next error",
          "type": "command"
        },
        {
          "command": "editor.action.marker.prev",
          "key": "p",
          "name": "Previous error",
          "type": "command"
        }
      ],
      "key": "e",
      "name": "+Errors",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "whichkey.openFile",
          "key": "f",
          "name": "Open file/folder",
          "type": "command"
        },
        {
          "command": "workbench.action.files.newUntitledFile",
          "key": "n",
          "name": "New Untitled",
          "type": "command"
        },
        {
          "command": "workbench.action.files.showOpenedFileInNewWindow",
          "key": "w",
          "name": "Open active in new window",
          "type": "command"
        },
        {
          "command": "workbench.action.files.save",
          "key": "s",
          "name": "Save file",
          "type": "command"
        },
        {
          "command": "workbench.action.files.saveAll",
          "key": "S",
          "name": "Save all files",
          "type": "command"
        },
        {
          "command": "workbench.action.openRecent",
          "key": "r",
          "name": "Open recent",
          "type": "command"
        },
        {
          "commands": [
            "workbench.files.action.showActiveFileInExplorer",
            "renameFile"
          ],
          "key": "R",
          "name": "Rename file",
          "type": "commands"
        },
        {
          "command": "workbench.view.explorer",
          "key": "t",
          "name": "Show tree/explorer view",
          "type": "command"
        },
        {
          "command": "workbench.files.action.showActiveFileInExplorer",
          "key": "T",
          "name": "Show active file in tree/explorer view",
          "type": "command"
        },
        {
          "command": "workbench.action.files.copyPathOfActiveFile",
          "key": "y",
          "name": "Copy path of active file",
          "type": "command"
        },
        {
          "command": "explorer.openWith",
          "key": "o",
          "name": "Open with",
          "type": "command"
        },
        {
          "command": "workbench.action.editor.changeLanguageMode",
          "key": "l",
          "name": "Change file language",
          "type": "command"
        },
        {
          "command": "editor.action.formatDocument",
          "key": "=",
          "name": "Format file",
          "type": "command"
        },
        {
          "bindings": [
            {
              "command": "changeEditorIndentation",
              "key": "i",
              "name": "Change indentation",
              "type": "command"
            },
            {
              "command": "editor.action.detectIndentation",
              "key": "d",
              "name": "Detect indentation",
              "type": "command"
            },
            {
              "command": "editor.action.reindentlines",
              "key": "r",
              "name": "Reindent",
              "type": "command"
            },
            {
              "command": "editor.action.reindentselectedlines",
              "key": "R",
              "name": "Reindent selected",
              "type": "command"
            },
            {
              "command": "editor.action.indentationToTabs",
              "key": "t",
              "name": "Convert indentation to tabs",
              "type": "command"
            },
            {
              "command": "editor.action.indentationToSpaces",
              "key": "s",
              "name": "Convert indentation to spaces",
              "type": "command"
            }
          ],
          "key": "i",
          "name": "+Indentation",
          "type": "bindings"
        }
      ],
      "key": "f",
      "name": "+File",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "git.checkout",
          "key": "b",
          "name": "Checkout",
          "type": "command"
        },
        {
          "command": "git.commit",
          "key": "c",
          "name": "Commit",
          "type": "command"
        },
        {
          "command": "git.deleteBranch",
          "key": "d",
          "name": "Delete Branch",
          "type": "command"
        },
        {
          "command": "git.fetch",
          "key": "f",
          "name": "Fetch",
          "type": "command"
        },
        {
          "command": "git.init",
          "key": "i",
          "name": "Init",
          "type": "command"
        },
        {
          "command": "git.merge",
          "key": "m",
          "name": "Merge",
          "type": "command"
        },
        {
          "command": "git.publish",
          "key": "p",
          "name": "Publish",
          "type": "command"
        },
        {
          "command": "workbench.view.scm",
          "key": "s",
          "name": "Status",
          "type": "command"
        },
        {
          "command": "git.stage",
          "key": "S",
          "name": "Stage",
          "type": "command"
        },
        {
          "command": "git.unstage",
          "key": "U",
          "name": "Unstage",
          "type": "command"
        }
      ],
      "key": "g",
      "name": "+Git",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "editor.action.insertLineAfter",
          "key": "j",
          "name": "Insert line below",
          "type": "command"
        },
        {
          "command": "editor.action.insertLineBefore",
          "key": "k",
          "name": "Insert line above",
          "type": "command"
        },
        {
          "command": "editor.action.insertSnippet",
          "key": "s",
          "name": "Insert snippet",
          "type": "command"
        }
      ],
      "key": "i",
      "name": "+Insert",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "workbench.action.quickOpen",
          "key": "f",
          "name": "Find file in project",
          "type": "command"
        },
        {
          "command": "workbench.action.openRecent",
          "key": "p",
          "name": "Switch project",
          "type": "command"
        },
        {
          "command": "workbench.view.explorer",
          "key": "t",
          "name": "Show tree/explorer view",
          "type": "command"
        }
      ],
      "key": "p",
      "name": "+Project",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "whichkey.repeatRecent",
          "key": ".",
          "name": "Repeat recent actions",
          "type": "command"
        }
      ],
      "key": "r",
      "name": "+Repeat",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "editor.action.rename",
          "key": "e",
          "name": "Edit symbol",
          "type": "command"
        },
        {
          "args": [null, "whichkey.transient.symbol"],
          "commands": [
            "editor.action.wordHighlight.trigger",
            "whichkey.showTransient"
          ],
          "key": "h",
          "name": "Highlight symbol transient",
          "type": "commands"
        },
        {
          "command": "workbench.action.gotoSymbol",
          "key": "j",
          "name": "Jump to symbol in file",
          "type": "command"
        },
        {
          "command": "workbench.action.showAllSymbols",
          "key": "J",
          "name": "Jump to symbol in workspace",
          "type": "command"
        },
        {
          "command": "workbench.action.findInFiles",
          "key": "p",
          "name": "Search in a project",
          "type": "command"
        },
        {
          "commands": [
            "editor.action.addSelectionToNextFindMatch",
            "workbench.action.findInFiles"
          ],
          "key": "P",
          "name": "Search in a project with a selection",
          "type": "commands"
        },
        {
          "command": "editor.action.referenceSearch.trigger",
          "key": "r",
          "name": "Search all references",
          "type": "command"
        },
        {
          "command": "references-view.find",
          "key": "R",
          "name": "Search all references in side bar",
          "type": "command"
        },
        {
          "command": "actions.find",
          "key": "s",
          "name": "Search in current file",
          "type": "command"
        }
      ],
      "key": "s",
      "name": "+Search/Symbol",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "workbench.view.explorer",
          "key": "e",
          "name": "Show explorer",
          "type": "command"
        },
        {
          "command": "workbench.view.search",
          "key": "s",
          "name": "Show search",
          "type": "command"
        },
        {
          "command": "workbench.view.scm",
          "key": "g",
          "name": "Show source control",
          "type": "command"
        },
        {
          "command": "workbench.view.extension.test",
          "key": "t",
          "name": "Show test",
          "type": "command"
        },
        {
          "command": "workbench.view.remote",
          "key": "r",
          "name": "Show remote explorer",
          "type": "command"
        },
        {
          "command": "workbench.view.extensions",
          "key": "x",
          "name": "Show extensions",
          "type": "command"
        },
        {
          "command": "workbench.actions.view.problems",
          "key": "p",
          "name": "Show problem",
          "type": "command"
        },
        {
          "command": "workbench.action.output.toggleOutput",
          "key": "o",
          "name": "Show output",
          "type": "command"
        },
        {
          "command": "workbench.debug.action.toggleRepl",
          "key": "d",
          "name": "Show debug console",
          "type": "command"
        }
      ],
      "key": "S",
      "name": "+Show",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "toggleFindCaseSensitive",
          "key": "c",
          "name": "Toggle find case sensitive",
          "type": "command"
        },
        {
          "command": "toggle.diff.ignoreTrimWhitespace",
          "key": "w",
          "name": "Toggle ignore trim whitespace in diff",
          "type": "command"
        },
        {
          "command": "editor.action.toggleWordWrap",
          "key": "W",
          "name": "Toggle word wrap",
          "type": "command"
        }
      ],
      "key": "t",
      "name": "+Toggles",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "workbench.action.toggleSidebarVisibility",
          "key": "b",
          "name": "Toggle side bar visibility",
          "type": "command"
        },
        {
          "command": "workbench.action.togglePanel",
          "key": "j",
          "name": "Toggle panel visibility",
          "type": "command"
        },
        {
          "command": "workbench.action.toggleFullScreen",
          "key": "F",
          "name": "Toggle full screen",
          "type": "command"
        },
        {
          "command": "workbench.action.selectTheme",
          "key": "s",
          "name": "Select theme",
          "type": "command"
        },
        {
          "command": "workbench.action.toggleMaximizedPanel",
          "key": "m",
          "name": "Toggle maximized panel",
          "type": "command"
        },
        {
          "command": "workbench.action.toggleActivityBarVisibility",
          "key": "t",
          "name": "Toggle tool/activity bar visibility",
          "type": "command"
        },
        {
          "command": "workbench.action.toggleTabsVisibility",
          "key": "T",
          "name": "Toggle tab visibility",
          "type": "command"
        },
        {
          "command": "workbench.action.toggleZenMode",
          "key": "z",
          "name": "Toggle zen mode",
          "type": "command"
        }
      ],
      "key": "T",
      "name": "+UI toggles",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "workbench.action.focusPreviousGroup",
          "key": "W",
          "name": "Focus previous editor group",
          "type": "command"
        },
        {
          "command": "workbench.action.splitEditorDown",
          "key": "-",
          "name": "Split editor below",
          "type": "command"
        },
        {
          "command": "workbench.action.splitEditor",
          "key": "/",
          "name": "Split editor right",
          "type": "command"
        },
        {
          "command": "workbench.action.splitEditorDown",
          "key": "s",
          "name": "Split editor below",
          "type": "command"
        },
        {
          "command": "workbench.action.splitEditor",
          "key": "v",
          "name": "Split editor right",
          "type": "command"
        },
        {
          "command": "workbench.action.focusLeftGroup",
          "key": "h",
          "name": "Focus editor group left",
          "type": "command"
        },
        {
          "command": "workbench.action.focusBelowGroup",
          "key": "j",
          "name": "Focus editor group down",
          "type": "command"
        },
        {
          "command": "workbench.action.focusAboveGroup",
          "key": "k",
          "name": "Focus editor group up",
          "type": "command"
        },
        {
          "command": "workbench.action.focusRightGroup",
          "key": "l",
          "name": "Focus editor group right",
          "type": "command"
        },
        {
          "command": "workbench.action.moveActiveEditorGroupLeft",
          "key": "H",
          "name": "Move editor group left",
          "type": "command"
        },
        {
          "command": "workbench.action.moveActiveEditorGroupDown",
          "key": "J",
          "name": "Move editor group down",
          "type": "command"
        },
        {
          "command": "workbench.action.moveActiveEditorGroupUp",
          "key": "K",
          "name": "Move editor group up",
          "type": "command"
        },
        {
          "command": "workbench.action.moveActiveEditorGroupRight",
          "key": "L",
          "name": "Move editor group right",
          "type": "command"
        },
        {
          "command": "workbench.action.toggleEditorWidths",
          "key": "t",
          "name": "Toggle editor group sizes",
          "type": "command"
        },
        {
          "command": "workbench.action.minimizeOtherEditors",
          "key": "m",
          "name": "Maximize editor group",
          "type": "command"
        },
        {
          "command": "workbench.action.maximizeEditor",
          "key": "M",
          "name": "Maximize editor group and hide side bar",
          "type": "command"
        },
        {
          "command": "workbench.action.evenEditorWidths",
          "key": "=",
          "name": "Reset editor group sizes",
          "type": "command"
        },
        {
          "command": "workbench.action.joinAllGroups",
          "key": "z",
          "name": "Combine all editors",
          "type": "command"
        },
        {
          "command": "workbench.action.closeEditorsInGroup",
          "key": "d",
          "name": "Close editor group",
          "type": "command"
        },
        {
          "command": "workbench.action.closeAllGroups",
          "key": "x",
          "name": "Close all editor groups",
          "type": "command"
        }
      ],
      "key": "w",
      "name": "+Window",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "command": "editor.action.organizeImports",
          "key": "i",
          "name": "Organize Imports",
          "type": "command"
        },
        {
          "command": "editor.action.rename",
          "key": "r",
          "name": "Rename symbol",
          "type": "command"
        },
        {
          "command": "editor.action.refactor",
          "key": "R",
          "name": "Refactor",
          "type": "command"
        },
        {
          "command": "editor.action.quickFix",
          "key": ".",
          "name": "Quick fix",
          "type": "command"
        },
        {
          "command": "editor.action.referenceSearch.trigger",
          "key": "a",
          "name": "Find all references",
          "type": "command"
        },
        {
          "command": "editor.action.transformToLowercase",
          "key": "u",
          "name": "To lower case",
          "type": "command"
        },
        {
          "command": "editor.action.transformToUppercase",
          "key": "U",
          "name": "To upper case",
          "type": "command"
        },
        {
          "args": [null, "whichkey.transient.lineMoving"],
          "commands": [
            "editor.action.moveLinesDownAction",
            "whichkey.showTransient"
          ],
          "key": "J",
          "name": "Move lines down transient",
          "type": "commands"
        },
        {
          "args": [null, "whichkey.transient.lineMoving"],
          "commands": [
            "editor.action.moveLinesUpAction",
            "whichkey.showTransient"
          ],
          "key": "K",
          "name": "Move lines up transient",
          "type": "commands"
        },
        {
          "bindings": [
            {
              "command": "editor.action.sortLinesAscending",
              "key": "s",
              "name": "Sort lines in ascending order",
              "type": "command"
            },
            {
              "command": "editor.action.sortLinesDescending",
              "key": "S",
              "name": "Sort lines in descending order",
              "type": "command"
            },
            {
              "command": "editor.action.copyLinesDownAction",
              "key": "d",
              "name": "Duplicate lines down",
              "type": "command"
            },
            {
              "command": "editor.action.copyLinesUpAction",
              "key": "D",
              "name": "Duplicate lines up",
              "type": "command"
            }
          ],
          "key": "l",
          "name": "+Lines",
          "type": "bindings"
        },
        {
          "bindings": [
            {
              "command": "editor.action.trimTrailingWhitespace",
              "key": "w",
              "name": "Delete trailing whitespace",
              "type": "command"
            }
          ],
          "key": "d",
          "name": "+Delete",
          "type": "bindings"
        },
        {
          "bindings": [
            {
              "command": "merge-conflict.accept.both",
              "key": "b",
              "name": "Accept both",
              "type": "command"
            },
            {
              "command": "merge-conflict.accept.current",
              "key": "c",
              "name": "Accept current",
              "type": "command"
            },
            {
              "command": "merge-conflict.accept.incoming",
              "key": "i",
              "name": "Accept incoming",
              "type": "command"
            },
            {
              "command": "merge-conflict.accept.all-both",
              "key": "B",
              "name": "Accept all both",
              "type": "command"
            },
            {
              "command": "merge-conflict.accept.all-current",
              "key": "C",
              "name": "Accept all current",
              "type": "command"
            },
            {
              "command": "merge-conflict.accept.all-incoming",
              "key": "I",
              "name": "Accept all incoming",
              "type": "command"
            },
            {
              "command": "merge-conflict.accept.selection",
              "key": "s",
              "name": "Accept selection",
              "type": "command"
            },
            {
              "command": "merge-conflict.compare",
              "key": "k",
              "name": "Compare current conflict",
              "type": "command"
            },
            {
              "command": "merge-conflict.next",
              "key": "n",
              "name": "Next Conflict",
              "type": "command"
            },
            {
              "command": "merge-conflict.previous",
              "key": "N",
              "name": "Previous Conflict",
              "type": "command"
            }
          ],
          "key": "m",
          "name": "+Merge conflict",
          "type": "bindings"
        }
      ],
      "key": "x",
      "name": "+Text",
      "type": "bindings"
    },
    {
      "bindings": [
        {
          "bindings": [
            {
              "command": "editor.toggleFold",
              "key": "a",
              "name": "Toggle: around a point",
              "type": "command"
            },
            {
              "command": "editor.fold",
              "key": "c",
              "name": "Close: at a point",
              "type": "command"
            },
            {
              "command": "editor.foldAllBlockComments",
              "key": "b",
              "name": "Close: all block comments",
              "type": "command"
            },
            {
              "command": "editor.foldAllMarkerRegions",
              "key": "g",
              "name": "Close: all regions",
              "type": "command"
            },
            {
              "command": "editor.foldAll",
              "key": "m",
              "name": "Close: all",
              "type": "command"
            },
            {
              "command": "editor.unfold",
              "key": "o",
              "name": "Open: at a point",
              "type": "command"
            },
            {
              "command": "editor.unfoldRecursively",
              "key": "O",
              "name": "Open: recursively",
              "type": "command"
            },
            {
              "command": "editor.unfoldAllMarkerRegions",
              "key": "G",
              "name": "Open: all regions",
              "type": "command"
            },
            {
              "command": "editor.unfoldAll",
              "key": "r",
              "name": "Open: all",
              "type": "command"
            }
          ],
          "key": ".",
          "name": "+Fold",
          "type": "bindings"
        },
        {
          "args": "whichkey.transient.frameZooming",
          "command": "whichkey.showTransient",
          "key": "f",
          "name": "Frame zooming transient",
          "type": "command"
        },
        {
          "args": "whichkey.transient.fontZooming",
          "command": "whichkey.showTransient",
          "key": "x",
          "name": "Font zooming transient",
          "type": "command"
        },
        {
          "args": "whichkey.transient.imageZooming",
          "command": "whichkey.showTransient",
          "key": "i",
          "name": "Image zooming transient",
          "type": "command"
        }
      ],
      "key": "z",
      "name": "+Zoom/Fold",
      "type": "bindings"
    },
    {
      "command": "workbench.action.terminal.focus",
      "key": "!",
      "name": "Show terminal",
      "type": "command"
    },
    {
      "command": "workbench.action.findInFiles",
      "key": "/",
      "name": "Search in a project",
      "type": "command"
    },
    {
      "commands": [
        "editor.action.addSelectionToNextFindMatch",
        "workbench.action.findInFiles"
      ],
      "key": "*",
      "name": "Search in a project with a selection",
      "type": "commands"
    },
    {
      "args": [null, "whichkey.transient.smartExpand"],
      "commands": ["editor.action.smartSelect.grow", "whichkey.showTransient"],
      "key": "v",
      "name": "Smart select/expand region transient",
      "type": "commands"
    },
    {
      "command": "workbench.action.focusFirstEditorGroup",
      "key": "1",
      "name": "Focus 1st editor group",
      "type": "command"
    },
    {
      "command": "workbench.action.focusSecondEditorGroup",
      "key": "2",
      "name": "Focus 2nd editor group",
      "type": "command"
    },
    {
      "command": "workbench.action.focusThirdEditorGroup",
      "key": "3",
      "name": "Focus 3rd editor group",
      "type": "command"
    },
    {
      "command": "workbench.action.focusFourthEditorGroup",
      "key": "4",
      "name": "Focus 4th editor group",
      "type": "command"
    },
    {
      "command": "workbench.action.focusFifthEditorGroup",
      "key": "5",
      "name": "Focus 5th editor group",
      "type": "command"
    },
    {
      "command": "workbench.action.focusSixthEditorGroup",
      "key": "6",
      "name": "Focus 6th editor group",
      "type": "command"
    },
    {
      "command": "workbench.action.focusSeventhEditorGroup",
      "key": "7",
      "name": "Focus 7th editor group",
      "type": "command"
    },
    {
      "command": "workbench.action.focusEighthEditorGroup",
      "key": "8",
      "name": "Focus 8th editor group",
      "type": "command"
    }
  ],
  "window.titleBarStyle": "custom",
  "windows.zoomLevel": 1,
  "workbench.colorTheme": "Best Themes - Calm Darkvenom",
  "workbench.editor.empty.hint": "hidden",
  "workbench.editor.enablePreview": false,
  "workbench.editor.showTabs": "single",
  "workbench.iconTheme": "catppuccin-mocha",
  "workbench.preferredDarkColorTheme": "Tokyo Night",
  "workbench.settings.applyToAllProfiles": [
    "editor.suggest.showStatusBar",
    "editor.fontFamily"
  ],
  "workbench.startupEditor": "welcomePageInEmptyWorkbench",
  "projectManager.git.baseFolders": ["C:\\Users\\vhtc8\\OneDrive\\projects"],
  "git.autofetch": true,
  "extensiontotal.apiKeySetting": "xtotal3a5336b6831a45679b4d6543735c4285",
  "codestream.serverUrl": "https://codestream-us1.service.newrelic.com",
  "editor.accessibilitySupport": "off",
  "workbench.productIconTheme": "fluent-icons"
}
